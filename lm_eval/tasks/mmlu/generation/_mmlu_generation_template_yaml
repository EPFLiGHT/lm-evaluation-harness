dataset_path: hails/mmlu_no_train # a copy of `cais/mmlu` with no auxiliary_train split
validation_split: validation
fewshot_split: dev
output_type: generate_until
#doc_to_text: "Q: {{question.strip()}}\n(A) {{choices[0]}} (B) {{choices[1]}} (C) {{choices[2]}} (D) {{choices[3]}}\nA: Provide the final answer after Final answer : the_answer." #enclosed in answer{the_answer}." Reflect on the question and p
doc_to_text: "Q: {{question.strip()}}\n(A) {{choices[0]}} (B) {{choices[1]}} (C) {{choices[2]}} (D) {{choices[3]}}\nA: Provide the final answer enclosed in boxed{the_answer}." 
doc_to_target: "{{['A', 'B', 'C', 'D'][answer]}}"
filter_list:
  - name: "strict-match"
    filter:
      - function: "regex"
        regex_pattern: (?i)answer\W(?:is)*\W*([A-D])(?:\W|$)|(?:answer|boxed)?{\W*([A-D])\W*}
      - function: "take_first"
  # - name: "strict-match"
  #   filter:
  #     - function: "regex"
  #       regex_pattern: "(?:answer|boxed){([^}]+)}"
  #     - function: "take_first"
  # - name: "flexible-extract"
  #   filter:
  #     - function: "multi_choice_regex"
  #       group_select: -1
  #       ignore_case: true
  #       ignore_punctuation: true
  #       regex_pattern: "(\\([A-Z]\\))"
  #     - function: "take_first"
generation_kwargs:
  until:
    # - "</s>"
    # - "Q:"
    - "<|im_end|>"
  do_sample: false
  temperature: 0.0
num_fewshot: 0
metric_list:
  - metric: exact_match
    aggregation: mean
    higher_is_better: true
# metric_list:
#   - metric: exact_match
#     aggregation: mean
#     higher_is_better: true
#     ignore_case: true
#     ignore_punctuation: true
metadata:
  version: 1.0
dataset_kwargs:
  trust_remote_code: true
